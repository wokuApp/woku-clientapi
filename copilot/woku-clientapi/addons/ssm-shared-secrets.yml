Parameters:
  App:
    Type: String
  Env:
    Type: String
  Name:
    Type: String

Resources:
  # Custom CloudFormation resource to find and attach policy to ExecutionRole
  SSMSecretsExecutionRoleAttachment:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt ExecutionRolePolicyAttacher.Arn
      ExecutionRoleName: !Sub '${App}-${Env}-${Name}-ExecutionRole'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'ssm:GetParameters'
              - 'ssm:GetParameter'
            Resource: 
              - 'arn:aws:ssm:us-east-1:893061506665:parameter/shared/prod/secrets/*'
          - Effect: Allow
            Action:
              - 'kms:Decrypt'
            Resource:
              - 'arn:aws:kms:us-east-1:893061506665:alias/aws/ssm'

  # Lambda function to attach policy to ExecutionRole
  ExecutionRolePolicyAttacher:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${App}-${Env}-${Name}-ExecutionRolePolicyAttacher'
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import json
          import cfnresponse
          
          def handler(event, context):
              try:
                  iam = boto3.client('iam')
                  
                  if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                      # Find the actual ExecutionRole name (it has a suffix)
                      role_prefix = event['ResourceProperties']['ExecutionRoleName']
                      
                      # List roles to find the one with matching prefix
                      roles = iam.list_roles()['Roles']
                      execution_role = None
                      
                      for role in roles:
                          if role['RoleName'].startswith(role_prefix):
                              execution_role = role['RoleName']
                              break
                      
                      if not execution_role:
                          raise Exception(f"ExecutionRole with prefix {role_prefix} not found")
                      
                      # Create inline policy
                      policy_name = f"{role_prefix}-SSMSecretsPolicy"
                      policy_document = event['ResourceProperties']['PolicyDocument']
                      
                      iam.put_role_policy(
                          RoleName=execution_role,
                          PolicyName=policy_name,
                          PolicyDocument=json.dumps(policy_document)
                      )
                      
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                          'ExecutionRoleName': execution_role,
                          'PolicyName': policy_name
                      })
                      
                  elif event['RequestType'] == 'Delete':
                      # Clean up the inline policy
                      try:
                          role_prefix = event['ResourceProperties']['ExecutionRoleName']
                          policy_name = f"{role_prefix}-SSMSecretsPolicy"
                          
                          # Find actual role name
                          roles = iam.list_roles()['Roles']
                          for role in roles:
                              if role['RoleName'].startswith(role_prefix):
                                  iam.delete_role_policy(RoleName=role['RoleName'], PolicyName=policy_name)
                                  break
                      except:
                          pass  # Ignore errors during cleanup
                      
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                      
              except Exception as e:
                  print(f"Error: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})

  # IAM role for the Lambda function
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: IAMAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'iam:ListRoles'
                  - 'iam:PutRolePolicy'
                  - 'iam:DeleteRolePolicy'
                Resource: '*'